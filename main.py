import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import sqlite3
from datetime import datetime

# –õ–æ–≥–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
EXERCISES = {
    "–ì—Ä—É–¥—å": [
        "–ñ–∏–º –≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ",
        "–ñ–∏–º –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –æ—Ç –≥—Ä—É–¥–∏ –≤–≤–µ—Ä—Ö",
        "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ —Å–∫–∞–º—å–µ",
        "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞",
        "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ —Å–∫–∞–º—å–µ",
        "–°–≤–µ–¥–µ–Ω–∏–µ —Ä—É–∫ –±–∞–±–æ—á–∫–∞",
    ],
    "–†—É–∫–∏": [
        "–°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏",
        "–°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ —Å–∏–¥—è",
        "–°–≥–∏–±–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Ä—É–∫–∏ –æ—Ç –∫–æ–ª–µ–Ω–∞",
        "–°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –≤ –±–ª–æ–∫–µ",
        "–°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –≤ –±–ª–æ–∫–µ –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º",
        "–°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –≤ –±–ª–æ–∫–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π",
        "–°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º",
        "–°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ —Å–æ —à—Ç–∞–Ω–≥–æ–π",
        "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –≤ –±–ª–æ–∫–µ",
        "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –≤ –±–ª–æ–∫–µ –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º",
        "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –∏–∑-–∑–∞ –≥–æ–ª–æ–≤—ã —Å –≥–∞–Ω—Ç–µ–ª—å—é",
        "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –∏–∑-–∑–∞ –≥–æ–ª–æ–≤—ã —Å –≥–∞–Ω—Ç–µ–ª—å—é —Å–∏–¥—è",
    ],
    "–°–ø–∏–Ω–∞": [
        "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç—è–≥–∞ –±–ª–æ–∫–∞ –∑–∞ –≥–æ–ª–æ–≤—É",
        "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç—è–≥–∞ –∫ –≥—Ä—É–¥–∏",
        "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ç—è–≥–∞ –±–ª–æ–∫–∞ —Å–∏–¥—è",
        "–ü—É–ª–æ–≤–µ—Ä –≤ –±–ª–æ–∫–µ —Å –ø—Ä—è–º–æ–π —Ä—É—á–∫–æ–π —Å—Ç–æ—è",
        "–¢—è–≥–∞ –≤ –Ω–∞–∫–ª–æ–Ω–µ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –°–º–∏—Ç–∞ –ø—Ä—è–º—ã–º —Ö–≤–∞—Ç–æ–º",
        "–¢—è–≥–∞ –≤ –Ω–∞–∫–ª–æ–Ω–µ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –°–º–∏—Ç–∞ –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º",
        "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –∫ –ø–æ—è—Å—É –≤ –Ω–∞–∫–ª–æ–Ω–µ",
        "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ –ø—Ä—è–º—ã–º —Ö–≤–∞—Ç–æ–º",
        "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º",
    ],
    "–ù–æ–≥–∏": [
        "–í—ã–ø–∞–¥—ã",
        "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
        "–ñ–∏–º –Ω–æ–≥–∞–º–∏",
        "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ —Å–º–∏—Ç–∞",
        "–ë–µ–≥",
        "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ —Å–∏–¥—è",
        "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ —Å–∏–¥—è",
    ]
}

NO_WEIGHT = ["–í—ã–ø–∞–¥—ã", "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "–ë–µ–≥"]

# –°–æ–∑–¥–∞–Ω–∏–µ ID –¥–ª—è –∫–Ω–æ–ø–æ–∫
CATEGORY_IDS = {f"cat{i}": cat for i, cat in enumerate(EXERCISES)}
CATEGORY_NAMES = {v: k for k, v in CATEGORY_IDS.items()}

EXERCISE_IDS = {}
EXERCISE_LOOKUP = {}

counter = 0
for cat, ex_list in EXERCISES.items():
    for ex in ex_list:
        ex_id = f"ex{counter}"
        EXERCISE_IDS[ex_id] = {"category": cat, "exercise": ex}
        EXERCISE_LOOKUP[(cat, ex)] = ex_id
        counter += 1


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('workouts.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS workouts
                 (user_id integer, date text, category text, exercise text, 
                  weight text, reps text, sets text, time text)''')
    conn.commit()
    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù–û–í–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê", callback_data="new")],
        [InlineKeyboardButton("–°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def new_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    buttons = [
        [InlineKeyboardButton(cat, callback_data=cat_id)]
        for cat_id, cat in CATEGORY_IDS.items()
    ]
    buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(buttons))


# –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
async def show_exercises(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    cat_id = query.data
    category = CATEGORY_IDS.get(cat_id)
    if not category:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞! –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    context.user_data['category'] = category

    buttons = []
    for ex in EXERCISES[category]:
        ex_id = EXERCISE_LOOKUP[(category, ex)]
        buttons.append([InlineKeyboardButton(ex, callback_data=ex_id)])

    buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="new")])
    buttons.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish")])

    await query.edit_message_text(f"{category}\n–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(buttons))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
async def handle_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    ex_id = query.data
    entry = EXERCISE_IDS.get(ex_id)
    if not entry:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞! –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    context.user_data['exercise'] = entry['exercise']
    context.user_data['category'] = entry['category']

    if entry['exercise'] in NO_WEIGHT:
        if entry['exercise'] == "–ë–µ–≥":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö:")
        else:
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—ã (—Ñ–æ—Ä–º–∞—Ç: 10x5):")
    else:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (—Ñ–æ—Ä–º–∞—Ç: –≤–µ—Å –• –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –• –ø–æ–¥—Ö–æ–¥—ã):")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def save_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    category = context.user_data.get('category')
    exercise = context.user_data.get('exercise')

    try:
        if exercise in NO_WEIGHT:
            if exercise == "–ë–µ–≥":
                time = f"{text} –º–∏–Ω"
                data = (user_id, datetime.now().strftime('%Y-%m-%d'), category, exercise, '', '', '', time)
            else:
                reps, sets = text.split('x')
                data = (user_id, datetime.now().strftime('%Y-%m-%d'), category, exercise, '', reps, sets, '')
        else:
            weight, reps, sets = text.split('x')
            data = (user_id, datetime.now().strftime('%Y-%m-%d'), category, exercise, weight, reps, sets, '')

        conn = sqlite3.connect('workouts.db')
        c = conn.cursor()
        c.execute("INSERT INTO workouts VALUES (?, ?, ?, ?, ?, ?, ?, ?)", data)
        conn.commit()
        conn.close()

        await update.message.reply_text('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
        await show_exercises_again(update, context)

    except Exception:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
async def show_exercises_again(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = context.user_data['category']
    buttons = []
    for ex in EXERCISES[category]:
        ex_id = EXERCISE_LOOKUP[(category, ex)]
        buttons.append([InlineKeyboardButton(ex, callback_data=ex_id)])

    buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="new")])
    buttons.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish")])

    await update.message.reply_text(f"{category}\n–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(buttons))


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await start(update, context)


# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    conn = sqlite3.connect('workouts.db')
    c = conn.cursor()
    c.execute("SELECT * FROM workouts WHERE user_id=? ORDER BY date DESC", (user_id,))
    data = c.fetchall()
    conn.close()

    if not data:
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
        return

    stats = {}
    for row in data:
        date = row[1]
        if date not in stats:
            stats[date] = []
        stats[date].append(row)

    message = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    for date, workouts in stats.items():
        message += f"üìÖ {date}:\n"
        for w in workouts:
            if w[7]:
                message += f"  - {w[3]}: {w[7]}\n"
            elif w[4]:
                message += f"  - {w[3]}: {w[4]}–∫–≥ x{w[5]} x{w[6]}\n"
            else:
                message += f"  - {w[3]}: x{w[5]} x{w[6]}\n"
        message += "\n"

    await query.edit_message_text(message)


# –ù–∞–∑–∞–¥
async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)


# –ó–∞–ø—É—Å–∫
def main():
    init_db()
    app = Application.builder().token("8067510613:AAFgWaMdeI0b_gMfHO0lHMurD1MI8YfQnFU").build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(new_workout, pattern='^new$'))
    app.add_handler(CallbackQueryHandler(show_exercises, pattern='^cat\d+$'))
    app.add_handler(CallbackQueryHandler(handle_exercise, pattern='^ex\d+$'))
    app.add_handler(CallbackQueryHandler(show_stats, pattern='^stats$'))
    app.add_handler(CallbackQueryHandler(finish, pattern='^finish$'))
    app.add_handler(CallbackQueryHandler(back, pattern='^back$'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_data))

    app.run_polling()


if __name__ == '__main__':
    main()
